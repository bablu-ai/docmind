%%{
  init: {
    'theme': 'base',
    'themeVariables': {
      'fontFamily': 'Comic Sans MS, cursive',
      'fontSize': '16px',
      'primaryColor': '#FDFD96',        # Light Yellow
      'nodeBorder': '#383838',
      'lineColor': '#555',
      'primaryTextColor': '#333',
      'secondaryColor': '#ADD8E6',      # Light Blue
      'tertiaryColor': '#FFB347'       # Light Orange
    }
  }
}%%
flowchart TD

    %% Define Custom Styles using theme variables or specific colors
    classDef uiStyle fill:#ADD8E6,stroke:#333,stroke-width:2px;       %% Light Blue
    classDef backendStyle fill:#90EE90,stroke:#333,stroke-width:2px;   %% Light Green
    classDef llmStyle fill:#FFFF99,stroke:#333,stroke-width:2px;       %% Light Yellow (matching theme tertiary)
    classDef dbStyle fill:#FFB6C1,stroke:#333,stroke-width:2px;        %% Light Red/Pink (e.g., for Database)
    classDef externalStyle fill:#FFFF99,stroke:#333,stroke-width:2px; %% Light Yellow (matching theme tertiary)


    %% Define Nodes and Subgraphs
    subgraph Frontend
        direction LR
        UI[User Interface (UI)]:::uiStyle
    end

    subgraph Backend Services
        direction TD %% Arrange components top-down within Backend
        BackendAPI[Backend API (Python)]:::backendStyle
        LiteLLMGateway{{LiteLLM Gateway}}:::llmStyle %% Iconic shape for gateway
        MongoDB[/MongoDB Database\]:::dbStyle      %% Iconic shape for Database
    end

    ExternalLLM[(External LLM Provider)]:::externalStyle %% Iconic shape for external service


    %% Define Flow (Edges)
    UI -- "User Query" --> BackendAPI;
    BackendAPI -- "Forwards Query" --> LiteLLMGateway;
    LiteLLMGateway -- "Request to LLM" --> ExternalLLM;
    ExternalLLM -- "Returns Response" --> LiteLLM Gateway; %% Corrected target node ID
    LiteLLMGateway -- "Forwards Response" --> BackendAPI;
    BackendAPI -- "Generates/Sends Response" --> UI;
    BackendAPI -- "Stores/Retrieves Basic Data" --> MongoDB;


    title Phase 1 Architecture Diagram: Basic Setup
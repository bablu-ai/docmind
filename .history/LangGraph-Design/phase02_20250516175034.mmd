%% title: Phase 2 Architecture Diagram: LangGraph & First Tool
%%{
  init: {
    'theme': 'base', %% Starting from a base theme for customization
    'themeVariables': {
      'fontFamily': 'Arial, sans-serif', %% Using a common, readable font; Comic Sans might not be universally available/readable
      'fontSize': '16px',             %% Slightly larger font size
      'primaryColor': '#ADD8E6',       %% Light Blue (UI)
      'secondaryColor': '#90EE90',      %% Light Green (Backend)
      'tertiaryColor': '#FFFF99',       %% Light Yellow (External/LLM Gateway)
      'quaternaryColor': '#FFB6C1',     %% Light Red/Pink (Database/Memory)
      'quinaryColor': '#A3DA8D',        %% Medium Green (LangGraph Nodes)
      'lineColor': '#555',              %% Darker lines for clarity
      'nodeBorder': '#333',             %% Darker node borders
      'primaryTextColor': '#333',       %% Dark text for readability
      'clusterBorder': '#BBB',          %% Lighter border for subgraphs
      'clusterBkg': '#F9F9F9'           %% Light background for subgraphs
    },
     'flowchart': {
       'curve': 'basis'
    },
     'look': 'handDrawn' %% Request hand-drawn look - support is renderer-dependent
  }
}%%
flowchart TD

    %% Define Custom Styles
    classDef uiStyle fill:#ADD8E6,stroke:#333,stroke-width:2px;
    classDef backendStyle fill:#90EE90,stroke:#333,stroke-width:2px;
    classDef llmStyle fill:#FFFF99,stroke:#333,stroke-width:2px;
    classDef dbStyle fill:#FFB6C1,stroke:#333,stroke-width:2px;
    classDef externalStyle fill:#FFFF99,stroke:#333,stroke-width:2px;
    %% Style for LangGraph nodes
    classDef graphNodeStyle fill:#A3DA8D,stroke:#333,stroke-width:2px; 
    %% Style for Memory (can share with DB color)
    classDef memoryStyle fill:#FFB6C1,stroke:#333,stroke-width:2px;    


    %% Define Nodes and Subgraphs

    subgraph DS[Data Storage]
          direction TB
          %% Added more detail to label
          MongoDB[/MongoDB<br>User/Conv Data\]:::dbStyle 
    end
    subgraph BS[Backend Services]
        direction TB
        BackendAPI[Backend API]:::backendStyle

        subgraph AG[Agent LangGraph]
            direction TB
            InputNode(Receive Query):::graphNodeStyle
            %% Decision node
            RouteQuery{Route Query / Intent}:::graphNodeStyle 
            CallStockTool[Call Stock Tool]:::graphNodeStyle
            ProcessStockResult[Process Stock Result]:::graphNodeStyle
            FormatFinalResponse[Format Final Response]:::graphNodeStyle
        end

        subgraph LG[LLM Gateway]
            direction TB
            LiteLLMGateway{{LiteLLM}}:::llmStyle
        end


        %% Node for STM
        STM[(Short-Term Memory<br>ConversationBufferMemory)]:::memoryStyle

        %% Internal Backend Connections
        %% Backend hands query to LangGraph
        BackendAPI -- "Invoke with Query" --> InputNode; 
        InputNode --> RouteQuery;
        RouteQuery -- "If Stock Query" --> CallStockTool;
        CallStockTool -- "Tool Output" --> ProcessStockResult;
        ProcessStockResult -- "Synthesized Info" --> FormatFinalResponse;
        %% LangGraph returns final response to BackendAPI
        FormatFinalResponse -- "Final Response" --> BackendAPI; 

        %% LangGraph nodes interact with STM
        InputNode -- "Access" --> STM;
        RouteQuery -- "Access" --> STM;
        CallStockTool -- "Access" --> STM;
        ProcessStockResult -- "Access" --> STM;
        FormatFinalResponse -- "Access" --> STM;
        %% Show data flow back from STM
        STM --> AG; 

        %% Placeholder/Simplified paths for non-stock queries in Phase 2
        %% Direct to final response for anything non-stock for now
        RouteQuery -- "Else (Simplified)" --> FormatFinalResponse; 

    end

    subgraph ED[External Dependencies]
        direction TB
        ExternalLLM[(External LLM Provider)]:::externalStyle
        %% Added external stock API used by the tool
        StockAPI[(External Stock API)]:::externalStyle 
    end


    %% Define Flow (Edges) between Subgraphs/Top-Level Nodes
    FE -- "User Query" --> BackendAPI;
    BackendAPI -- "Response" --> FE;
    %% LiteLLM talks to External LLM Provider(s)
    LG -- "Request" --> ED; 
    ED -- "Response" --> LG;

    %% Stock tool uses external API
    CallStockTool -- "Call API" --> StockAPI; 
    StockAPI -- "Data" --> CallStockTool;

    %% Backend API still interacts with DB for basic data
    BackendAPI -- "DB Ops" --> DS; 
     %% Backend API still interacts with DB for basic data
    DS -- "Data" --> BackendAPI;

    %% Apply curved lines using 'basis' interpolation
    linkStyle default interpolate basis;